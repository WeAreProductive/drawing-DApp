/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LibRollupsInterface extends utils.Interface {
  functions: {};

  events: {
    "FinalizeEpoch(uint256,bytes32)": EventFragment;
    "PhaseChange(uint8)": EventFragment;
    "ResolveDispute(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FinalizeEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolveDispute"): EventFragment;
}

export interface FinalizeEpochEventObject {
  epochNumber: BigNumber;
  epochHash: string;
}
export type FinalizeEpochEvent = TypedEvent<
  [BigNumber, string],
  FinalizeEpochEventObject
>;

export type FinalizeEpochEventFilter = TypedEventFilter<FinalizeEpochEvent>;

export interface PhaseChangeEventObject {
  newPhase: number;
}
export type PhaseChangeEvent = TypedEvent<[number], PhaseChangeEventObject>;

export type PhaseChangeEventFilter = TypedEventFilter<PhaseChangeEvent>;

export interface ResolveDisputeEventObject {
  winner: string;
  loser: string;
  winningClaim: string;
}
export type ResolveDisputeEvent = TypedEvent<
  [string, string, string],
  ResolveDisputeEventObject
>;

export type ResolveDisputeEventFilter = TypedEventFilter<ResolveDisputeEvent>;

export interface LibRollups extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibRollupsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "FinalizeEpoch(uint256,bytes32)"(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      epochHash?: null
    ): FinalizeEpochEventFilter;
    FinalizeEpoch(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      epochHash?: null
    ): FinalizeEpochEventFilter;

    "PhaseChange(uint8)"(newPhase?: null): PhaseChangeEventFilter;
    PhaseChange(newPhase?: null): PhaseChangeEventFilter;

    "ResolveDispute(address,address,bytes32)"(
      winner?: null,
      loser?: null,
      winningClaim?: null
    ): ResolveDisputeEventFilter;
    ResolveDispute(
      winner?: null,
      loser?: null,
      winningClaim?: null
    ): ResolveDisputeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
