/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QuorumInterface extends utils.Interface {
  functions: {
    "getEpochLength()": FunctionFragment;
    "isValidatorInFavorOf(address,uint256,bytes32,uint256)": FunctionFragment;
    "numOfValidators()": FunctionFragment;
    "numOfValidatorsInFavorOf(address,uint256,bytes32)": FunctionFragment;
    "submitClaim(address,uint256,bytes32)": FunctionFragment;
    "validatorById(uint256)": FunctionFragment;
    "validatorId(address)": FunctionFragment;
    "wasClaimAccepted(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEpochLength"
      | "isValidatorInFavorOf"
      | "numOfValidators"
      | "numOfValidatorsInFavorOf"
      | "submitClaim"
      | "validatorById"
      | "validatorId"
      | "wasClaimAccepted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEpochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorInFavorOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numOfValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfValidatorsInFavorOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wasClaimAccepted",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorInFavorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfValidatorsInFavorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasClaimAccepted",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAcceptance(address,uint256,bytes32)": EventFragment;
    "ClaimSubmission(address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAcceptance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSubmission"): EventFragment;
}

export interface ClaimAcceptanceEventObject {
  appContract: string;
  lastProcessedBlockNumber: BigNumber;
  claim: string;
}
export type ClaimAcceptanceEvent = TypedEvent<
  [string, BigNumber, string],
  ClaimAcceptanceEventObject
>;

export type ClaimAcceptanceEventFilter = TypedEventFilter<ClaimAcceptanceEvent>;

export interface ClaimSubmissionEventObject {
  submitter: string;
  appContract: string;
  lastProcessedBlockNumber: BigNumber;
  claim: string;
}
export type ClaimSubmissionEvent = TypedEvent<
  [string, string, BigNumber, string],
  ClaimSubmissionEventObject
>;

export type ClaimSubmissionEventFilter = TypedEventFilter<ClaimSubmissionEvent>;

export interface Quorum extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuorumInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The epoch number of a block is defined as the integer division of the block number by the epoch length.
     * Get the epoch length, in number of base layer blocks.
     */
    getEpochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Assumes the provided ID is valid.
     * Check whether a validator is in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param id The ID of the validator
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    isValidatorInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Get the number of validators.
     */
    numOfValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the number of validators in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    numOfValidatorsInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.
     * Submit a claim to the consensus.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    submitClaim(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Validator IDs range from 1 to `N`, the total number of validators.Invalid IDs map to address zero.
     * Get the address of a validator by its ID.
     * @param id The validator ID
     */
    validatorById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Validators have IDs greater than zero.Non-validators are assigned to ID zero.
     * Get the ID of a validator.
     * @param validator The validator address
     */
    validatorId(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Check if an output Merkle root hash was ever accepted by the consensus for a particular application.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     */
    wasClaimAccepted(
      appContract: PromiseOrValue<string>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   * The epoch number of a block is defined as the integer division of the block number by the epoch length.
   * Get the epoch length, in number of base layer blocks.
   */
  getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Assumes the provided ID is valid.
   * Check whether a validator is in favor of a claim.
   * @param appContract The application contract address
   * @param claim The output Merkle root hash
   * @param id The ID of the validator
   * @param lastProcessedBlockNumber The number of the last processed block
   */
  isValidatorInFavorOf(
    appContract: PromiseOrValue<string>,
    lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<BytesLike>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Get the number of validators.
   */
  numOfValidators(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the number of validators in favor of a claim.
   * @param appContract The application contract address
   * @param claim The output Merkle root hash
   * @param lastProcessedBlockNumber The number of the last processed block
   */
  numOfValidatorsInFavorOf(
    appContract: PromiseOrValue<string>,
    lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.
   * Submit a claim to the consensus.
   * @param appContract The application contract address
   * @param claim The root of the Merkle tree of outputs
   * @param lastProcessedBlockNumber The number of the last processed block
   */
  submitClaim(
    appContract: PromiseOrValue<string>,
    lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Validator IDs range from 1 to `N`, the total number of validators.Invalid IDs map to address zero.
   * Get the address of a validator by its ID.
   * @param id The validator ID
   */
  validatorById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Validators have IDs greater than zero.Non-validators are assigned to ID zero.
   * Get the ID of a validator.
   * @param validator The validator address
   */
  validatorId(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Check if an output Merkle root hash was ever accepted by the consensus for a particular application.
   * @param appContract The application contract address
   * @param claim The root of the Merkle tree of outputs
   */
  wasClaimAccepted(
    appContract: PromiseOrValue<string>,
    claim: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     * The epoch number of a block is defined as the integer division of the block number by the epoch length.
     * Get the epoch length, in number of base layer blocks.
     */
    getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Assumes the provided ID is valid.
     * Check whether a validator is in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param id The ID of the validator
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    isValidatorInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Get the number of validators.
     */
    numOfValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the number of validators in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    numOfValidatorsInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.
     * Submit a claim to the consensus.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    submitClaim(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Validator IDs range from 1 to `N`, the total number of validators.Invalid IDs map to address zero.
     * Get the address of a validator by its ID.
     * @param id The validator ID
     */
    validatorById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Validators have IDs greater than zero.Non-validators are assigned to ID zero.
     * Get the ID of a validator.
     * @param validator The validator address
     */
    validatorId(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check if an output Merkle root hash was ever accepted by the consensus for a particular application.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     */
    wasClaimAccepted(
      appContract: PromiseOrValue<string>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimAcceptance(address,uint256,bytes32)"(
      appContract?: PromiseOrValue<string> | null,
      lastProcessedBlockNumber?: null,
      claim?: null
    ): ClaimAcceptanceEventFilter;
    ClaimAcceptance(
      appContract?: PromiseOrValue<string> | null,
      lastProcessedBlockNumber?: null,
      claim?: null
    ): ClaimAcceptanceEventFilter;

    "ClaimSubmission(address,address,uint256,bytes32)"(
      submitter?: PromiseOrValue<string> | null,
      appContract?: PromiseOrValue<string> | null,
      lastProcessedBlockNumber?: null,
      claim?: null
    ): ClaimSubmissionEventFilter;
    ClaimSubmission(
      submitter?: PromiseOrValue<string> | null,
      appContract?: PromiseOrValue<string> | null,
      lastProcessedBlockNumber?: null,
      claim?: null
    ): ClaimSubmissionEventFilter;
  };

  estimateGas: {
    /**
     * The epoch number of a block is defined as the integer division of the block number by the epoch length.
     * Get the epoch length, in number of base layer blocks.
     */
    getEpochLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Assumes the provided ID is valid.
     * Check whether a validator is in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param id The ID of the validator
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    isValidatorInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of validators.
     */
    numOfValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the number of validators in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    numOfValidatorsInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.
     * Submit a claim to the consensus.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    submitClaim(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Validator IDs range from 1 to `N`, the total number of validators.Invalid IDs map to address zero.
     * Get the address of a validator by its ID.
     * @param id The validator ID
     */
    validatorById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Validators have IDs greater than zero.Non-validators are assigned to ID zero.
     * Get the ID of a validator.
     * @param validator The validator address
     */
    validatorId(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check if an output Merkle root hash was ever accepted by the consensus for a particular application.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     */
    wasClaimAccepted(
      appContract: PromiseOrValue<string>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The epoch number of a block is defined as the integer division of the block number by the epoch length.
     * Get the epoch length, in number of base layer blocks.
     */
    getEpochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Assumes the provided ID is valid.
     * Check whether a validator is in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param id The ID of the validator
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    isValidatorInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of validators.
     */
    numOfValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the number of validators in favor of a claim.
     * @param appContract The application contract address
     * @param claim The output Merkle root hash
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    numOfValidatorsInFavorOf(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.
     * Submit a claim to the consensus.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     * @param lastProcessedBlockNumber The number of the last processed block
     */
    submitClaim(
      appContract: PromiseOrValue<string>,
      lastProcessedBlockNumber: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Validator IDs range from 1 to `N`, the total number of validators.Invalid IDs map to address zero.
     * Get the address of a validator by its ID.
     * @param id The validator ID
     */
    validatorById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Validators have IDs greater than zero.Non-validators are assigned to ID zero.
     * Get the ID of a validator.
     * @param validator The validator address
     */
    validatorId(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check if an output Merkle root hash was ever accepted by the consensus for a particular application.
     * @param appContract The application contract address
     * @param claim The root of the Merkle tree of outputs
     */
    wasClaimAccepted(
      appContract: PromiseOrValue<string>,
      claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
