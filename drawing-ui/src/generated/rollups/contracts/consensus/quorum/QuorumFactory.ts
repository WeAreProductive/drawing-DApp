/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface QuorumFactoryInterface extends utils.Interface {
  functions: {
    "calculateQuorumAddress(address[],uint256,bytes32)": FunctionFragment;
    "newQuorum(address[],uint256,bytes32)": FunctionFragment;
    "newQuorum(address[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateQuorumAddress"
      | "newQuorum(address[],uint256,bytes32)"
      | "newQuorum(address[],uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateQuorumAddress",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newQuorum(address[],uint256,bytes32)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newQuorum(address[],uint256)",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateQuorumAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newQuorum(address[],uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newQuorum(address[],uint256)",
    data: BytesLike
  ): Result;

  events: {
    "QuorumCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
}

export interface QuorumCreatedEventObject {
  quorum: string;
}
export type QuorumCreatedEvent = TypedEvent<[string], QuorumCreatedEventObject>;

export type QuorumCreatedEventFilter = TypedEventFilter<QuorumCreatedEvent>;

export interface QuorumFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuorumFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.
     * Calculate the address of a quorum to be deployed deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    calculateQuorumAddress(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256,bytes32)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum.
     * @param epochLength The epoch length
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.
   * Calculate the address of a quorum to be deployed deterministically.
   * @param epochLength The epoch length
   * @param salt The salt used to deterministically generate the quorum address
   * @param validators the list of validators
   */
  calculateQuorumAddress(
    validators: PromiseOrValue<string>[],
    epochLength: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
   * Deploy a new quorum deterministically.
   * @param epochLength The epoch length
   * @param salt The salt used to deterministically generate the quorum address
   * @param validators the list of validators
   */
  "newQuorum(address[],uint256,bytes32)"(
    validators: PromiseOrValue<string>[],
    epochLength: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
   * Deploy a new quorum.
   * @param epochLength The epoch length
   * @param validators the list of validators
   */
  "newQuorum(address[],uint256)"(
    validators: PromiseOrValue<string>[],
    epochLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.
     * Calculate the address of a quorum to be deployed deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    calculateQuorumAddress(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256,bytes32)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum.
     * @param epochLength The epoch length
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "QuorumCreated(address)"(quorum?: null): QuorumCreatedEventFilter;
    QuorumCreated(quorum?: null): QuorumCreatedEventFilter;
  };

  estimateGas: {
    /**
     * Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.
     * Calculate the address of a quorum to be deployed deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    calculateQuorumAddress(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256,bytes32)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum.
     * @param epochLength The epoch length
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.
     * Calculate the address of a quorum to be deployed deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    calculateQuorumAddress(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum deterministically.
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the quorum address
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256,bytes32)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.
     * Deploy a new quorum.
     * @param epochLength The epoch length
     * @param validators the list of validators
     */
    "newQuorum(address[],uint256)"(
      validators: PromiseOrValue<string>[],
      epochLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
