/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type DiamondConfigStruct = {
  templateHash: PromiseOrValue<BytesLike>;
  inputDuration: PromiseOrValue<BigNumberish>;
  challengePeriod: PromiseOrValue<BigNumberish>;
  inputLog2Size: PromiseOrValue<BigNumberish>;
  feePerClaim: PromiseOrValue<BigNumberish>;
  feeManagerBank: PromiseOrValue<string>;
  feeManagerOwner: PromiseOrValue<string>;
  validators: PromiseOrValue<string>[];
};

export type DiamondConfigStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string[]
] & {
  templateHash: string;
  inputDuration: BigNumber;
  challengePeriod: BigNumber;
  inputLog2Size: BigNumber;
  feePerClaim: BigNumber;
  feeManagerBank: string;
  feeManagerOwner: string;
  validators: string[];
};

export interface DiamondInitInterface extends utils.Interface {
  functions: {
    "init((bytes32,uint256,uint256,uint256,uint256,address,address,address[]))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "init"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "init",
    values: [DiamondConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;

  events: {
    "FeeManagerInitialized(uint256,address,address)": EventFragment;
    "RollupsInitialized(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeManagerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollupsInitialized"): EventFragment;
}

export interface FeeManagerInitializedEventObject {
  feePerClaim: BigNumber;
  feeManagerBank: string;
  feeManagerOwner: string;
}
export type FeeManagerInitializedEvent = TypedEvent<
  [BigNumber, string, string],
  FeeManagerInitializedEventObject
>;

export type FeeManagerInitializedEventFilter =
  TypedEventFilter<FeeManagerInitializedEvent>;

export interface RollupsInitializedEventObject {
  inputDuration: BigNumber;
  challengePeriod: BigNumber;
}
export type RollupsInitializedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RollupsInitializedEventObject
>;

export type RollupsInitializedEventFilter =
  TypedEventFilter<RollupsInitializedEvent>;

export interface DiamondInit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondInitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    init(
      _dConfig: DiamondConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  init(
    _dConfig: DiamondConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    init(
      _dConfig: DiamondConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeManagerInitialized(uint256,address,address)"(
      feePerClaim?: null,
      feeManagerBank?: null,
      feeManagerOwner?: null
    ): FeeManagerInitializedEventFilter;
    FeeManagerInitialized(
      feePerClaim?: null,
      feeManagerBank?: null,
      feeManagerOwner?: null
    ): FeeManagerInitializedEventFilter;

    "RollupsInitialized(uint256,uint256)"(
      inputDuration?: null,
      challengePeriod?: null
    ): RollupsInitializedEventFilter;
    RollupsInitialized(
      inputDuration?: null,
      challengePeriod?: null
    ): RollupsInitializedEventFilter;
  };

  estimateGas: {
    init(
      _dConfig: DiamondConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    init(
      _dConfig: DiamondConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
