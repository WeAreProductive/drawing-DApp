/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISelfHostedApplicationFactoryInterface
  extends utils.Interface {
  functions: {
    "calculateAddresses(address,uint256,address,bytes32,bytes32)": FunctionFragment;
    "deployContracts(address,uint256,address,bytes32,bytes32)": FunctionFragment;
    "getApplicationFactory()": FunctionFragment;
    "getAuthorityFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateAddresses"
      | "deployContracts"
      | "getApplicationFactory"
      | "getAuthorityFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorityFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorityFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISelfHostedApplicationFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISelfHostedApplicationFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Calculate the addresses of the application and authority contracts to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    calculateAddresses(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Reverts if the authority owner address is zero.Reverts if the application owner address is zero.Reverts if the epoch length is zero.
     * Deploy new application and authority contracts deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    deployContracts(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the factory used to deploy `IApplication` contracts
     */
    getApplicationFactory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the factory used to deploy `IAuthority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Calculate the addresses of the application and authority contracts to be deployed deterministically.
   * @param appOwner The initial application owner
   * @param authorityOwner The initial authority owner
   * @param epochLength The epoch length
   * @param salt The salt used to deterministically generate the addresses
   * @param templateHash The initial machine state hash
   */
  calculateAddresses(
    authorityOwner: PromiseOrValue<string>,
    epochLength: PromiseOrValue<BigNumberish>,
    appOwner: PromiseOrValue<string>,
    templateHash: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  /**
   * Reverts if the authority owner address is zero.Reverts if the application owner address is zero.Reverts if the epoch length is zero.
   * Deploy new application and authority contracts deterministically.
   * @param appOwner The initial application owner
   * @param authorityOwner The initial authority owner
   * @param epochLength The epoch length
   * @param salt The salt used to deterministically generate the addresses
   * @param templateHash The initial machine state hash
   */
  deployContracts(
    authorityOwner: PromiseOrValue<string>,
    epochLength: PromiseOrValue<BigNumberish>,
    appOwner: PromiseOrValue<string>,
    templateHash: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the factory used to deploy `IApplication` contracts
   */
  getApplicationFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the factory used to deploy `IAuthority` contracts
   */
  getAuthorityFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Calculate the addresses of the application and authority contracts to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    calculateAddresses(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Reverts if the authority owner address is zero.Reverts if the application owner address is zero.Reverts if the epoch length is zero.
     * Deploy new application and authority contracts deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    deployContracts(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Get the factory used to deploy `IApplication` contracts
     */
    getApplicationFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the factory used to deploy `IAuthority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Calculate the addresses of the application and authority contracts to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    calculateAddresses(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if the authority owner address is zero.Reverts if the application owner address is zero.Reverts if the epoch length is zero.
     * Deploy new application and authority contracts deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    deployContracts(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the factory used to deploy `IApplication` contracts
     */
    getApplicationFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the factory used to deploy `IAuthority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Calculate the addresses of the application and authority contracts to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    calculateAddresses(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the authority owner address is zero.Reverts if the application owner address is zero.Reverts if the epoch length is zero.
     * Deploy new application and authority contracts deterministically.
     * @param appOwner The initial application owner
     * @param authorityOwner The initial authority owner
     * @param epochLength The epoch length
     * @param salt The salt used to deterministically generate the addresses
     * @param templateHash The initial machine state hash
     */
    deployContracts(
      authorityOwner: PromiseOrValue<string>,
      epochLength: PromiseOrValue<BigNumberish>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the factory used to deploy `IApplication` contracts
     */
    getApplicationFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the factory used to deploy `IAuthority` contracts
     */
    getAuthorityFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
