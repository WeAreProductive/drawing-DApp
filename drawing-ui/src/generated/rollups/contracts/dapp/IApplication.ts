/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type OutputValidityProofStruct = {
  outputIndex: PromiseOrValue<BigNumberish>;
  outputHashesSiblings: PromiseOrValue<BytesLike>[];
};

export type OutputValidityProofStructOutput = [BigNumber, string[]] & {
  outputIndex: BigNumber;
  outputHashesSiblings: string[];
};

export interface IApplicationInterface extends utils.Interface {
  functions: {
    "executeOutput(bytes,(uint64,bytes32[]))": FunctionFragment;
    "getConsensus()": FunctionFragment;
    "getTemplateHash()": FunctionFragment;
    "migrateToConsensus(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateOutput(bytes,(uint64,bytes32[]))": FunctionFragment;
    "validateOutputHash(bytes32,(uint64,bytes32[]))": FunctionFragment;
    "wasOutputExecuted(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeOutput"
      | "getConsensus"
      | "getTemplateHash"
      | "migrateToConsensus"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "validateOutput"
      | "validateOutputHash"
      | "wasOutputExecuted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeOutput",
    values: [PromiseOrValue<BytesLike>, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOutput",
    values: [PromiseOrValue<BytesLike>, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOutputHash",
    values: [PromiseOrValue<BytesLike>, OutputValidityProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wasOutputExecuted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOutputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasOutputExecuted",
    data: BytesLike
  ): Result;

  events: {
    "NewConsensus(address)": EventFragment;
    "OutputExecuted(uint64,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewConsensus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputExecuted"): EventFragment;
}

export interface NewConsensusEventObject {
  newConsensus: string;
}
export type NewConsensusEvent = TypedEvent<[string], NewConsensusEventObject>;

export type NewConsensusEventFilter = TypedEventFilter<NewConsensusEvent>;

export interface OutputExecutedEventObject {
  outputIndex: BigNumber;
  output: string;
}
export type OutputExecutedEvent = TypedEvent<
  [BigNumber, string],
  OutputExecutedEventObject
>;

export type OutputExecutedEventFilter = TypedEventFilter<OutputExecutedEvent>;

export interface IApplication extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IApplicationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the application's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Can only be called by the application owner.
     * Migrate the application to a new consensus.
     * @param newConsensus The new consensus
     */
    migrateToConsensus(
      newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateOutputHash(
      outputHash: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Check whether an output has been executed.
     * @param outputIndex The index of output
     */
    wasOutputExecuted(
      outputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  executeOutput(
    output: PromiseOrValue<BytesLike>,
    proof: OutputValidityProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the current consensus.
   */
  getConsensus(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the application's template hash.
   */
  getTemplateHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Can only be called by the application owner.
   * Migrate the application to a new consensus.
   * @param newConsensus The new consensus
   */
  migrateToConsensus(
    newConsensus: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateOutput(
    output: PromiseOrValue<BytesLike>,
    proof: OutputValidityProofStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateOutputHash(
    outputHash: PromiseOrValue<BytesLike>,
    proof: OutputValidityProofStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Check whether an output has been executed.
   * @param outputIndex The index of output
   */
  wasOutputExecuted(
    outputIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    executeOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the application's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Can only be called by the application owner.
     * Migrate the application to a new consensus.
     * @param newConsensus The new consensus
     */
    migrateToConsensus(
      newConsensus: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOutputHash(
      outputHash: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Check whether an output has been executed.
     * @param outputIndex The index of output
     */
    wasOutputExecuted(
      outputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewConsensus(address)"(newConsensus?: null): NewConsensusEventFilter;
    NewConsensus(newConsensus?: null): NewConsensusEventFilter;

    "OutputExecuted(uint64,bytes)"(
      outputIndex?: null,
      output?: null
    ): OutputExecutedEventFilter;
    OutputExecuted(
      outputIndex?: null,
      output?: null
    ): OutputExecutedEventFilter;
  };

  estimateGas: {
    executeOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the application's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Can only be called by the application owner.
     * Migrate the application to a new consensus.
     * @param newConsensus The new consensus
     */
    migrateToConsensus(
      newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOutputHash(
      outputHash: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether an output has been executed.
     * @param outputIndex The index of output
     */
    wasOutputExecuted(
      outputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the application's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the application owner.
     * Migrate the application to a new consensus.
     * @param newConsensus The new consensus
     */
    migrateToConsensus(
      newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateOutput(
      output: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOutputHash(
      outputHash: PromiseOrValue<BytesLike>,
      proof: OutputValidityProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether an output has been executed.
     * @param outputIndex The index of output
     */
    wasOutputExecuted(
      outputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
