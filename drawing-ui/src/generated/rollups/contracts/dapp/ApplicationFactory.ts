/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ApplicationFactoryInterface extends utils.Interface {
  functions: {
    "calculateApplicationAddress(address,address,bytes32,bytes32)": FunctionFragment;
    "newApplication(address,address,bytes32,bytes32)": FunctionFragment;
    "newApplication(address,address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateApplicationAddress"
      | "newApplication(address,address,bytes32,bytes32)"
      | "newApplication(address,address,bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateApplicationAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateApplicationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "ApplicationCreated(address,address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationCreated"): EventFragment;
}

export interface ApplicationCreatedEventObject {
  consensus: string;
  appOwner: string;
  templateHash: string;
  appContract: string;
}
export type ApplicationCreatedEvent = TypedEvent<
  [string, string, string, string],
  ApplicationCreatedEventObject
>;

export type ApplicationCreatedEventFilter =
  TypedEventFilter<ApplicationCreatedEvent>;

export interface ApplicationFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApplicationFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.
     * Calculate the address of an application contract to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    calculateApplicationAddress(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.
   * Calculate the address of an application contract to be deployed deterministically.
   * @param appOwner The initial application owner
   * @param consensus The initial consensus contract
   * @param salt The salt used to deterministically generate the application contract address
   * @param templateHash The initial machine state hash
   */
  calculateApplicationAddress(
    consensus: PromiseOrValue<string>,
    appOwner: PromiseOrValue<string>,
    templateHash: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
   * Deploy a new application deterministically.
   * @param appOwner The initial application owner
   * @param consensus The initial consensus contract
   * @param salt The salt used to deterministically generate the application contract address
   * @param templateHash The initial machine state hash
   */
  "newApplication(address,address,bytes32,bytes32)"(
    consensus: PromiseOrValue<string>,
    appOwner: PromiseOrValue<string>,
    templateHash: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
   * Deploy a new application.
   * @param appOwner The initial application owner
   * @param consensus The initial consensus contract
   * @param templateHash The initial machine state hash
   */
  "newApplication(address,address,bytes32)"(
    consensus: PromiseOrValue<string>,
    appOwner: PromiseOrValue<string>,
    templateHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.
     * Calculate the address of an application contract to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    calculateApplicationAddress(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApplicationCreated(address,address,bytes32,address)"(
      consensus?: PromiseOrValue<string> | null,
      appOwner?: null,
      templateHash?: null,
      appContract?: null
    ): ApplicationCreatedEventFilter;
    ApplicationCreated(
      consensus?: PromiseOrValue<string> | null,
      appOwner?: null,
      templateHash?: null,
      appContract?: null
    ): ApplicationCreatedEventFilter;
  };

  estimateGas: {
    /**
     * Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.
     * Calculate the address of an application contract to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    calculateApplicationAddress(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.
     * Calculate the address of an application contract to be deployed deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    calculateApplicationAddress(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application deterministically.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param salt The salt used to deterministically generate the application contract address
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.
     * Deploy a new application.
     * @param appOwner The initial application owner
     * @param consensus The initial consensus contract
     * @param templateHash The initial machine state hash
     */
    "newApplication(address,address,bytes32)"(
      consensus: PromiseOrValue<string>,
      appOwner: PromiseOrValue<string>,
      templateHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
