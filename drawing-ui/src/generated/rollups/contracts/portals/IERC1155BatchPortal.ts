/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IERC1155BatchPortalInterface extends utils.Interface {
  functions: {
    "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": FunctionFragment;
    "getInputBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "depositBatchERC1155Token" | "getInputBox"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositBatchERC1155Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputBox",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositBatchERC1155Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputBox",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1155BatchPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1155BatchPortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Please make sure the arrays `tokenIds` and `values` have the same length.
     * Transfer a batch of ERC-1155 tokens of multiple types to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenIds The identifiers of the tokens being transferred
     * @param values Transfer amounts per token type
     */
    depositBatchERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Please make sure the arrays `tokenIds` and `values` have the same length.
   * Transfer a batch of ERC-1155 tokens of multiple types to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
   * @param appContract The application contract address
   * @param baseLayerData Additional data to be interpreted by the base layer
   * @param execLayerData Additional data to be interpreted by the execution layer
   * @param token The ERC-1155 token contract
   * @param tokenIds The identifiers of the tokens being transferred
   * @param values Transfer amounts per token type
   */
  depositBatchERC1155Token(
    token: PromiseOrValue<string>,
    appContract: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    baseLayerData: PromiseOrValue<BytesLike>,
    execLayerData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the input box used by this portal.
   */
  getInputBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Please make sure the arrays `tokenIds` and `values` have the same length.
     * Transfer a batch of ERC-1155 tokens of multiple types to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenIds The identifiers of the tokens being transferred
     * @param values Transfer amounts per token type
     */
    depositBatchERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Please make sure the arrays `tokenIds` and `values` have the same length.
     * Transfer a batch of ERC-1155 tokens of multiple types to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenIds The identifiers of the tokens being transferred
     * @param values Transfer amounts per token type
     */
    depositBatchERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Please make sure the arrays `tokenIds` and `values` have the same length.
     * Transfer a batch of ERC-1155 tokens of multiple types to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenIds The identifiers of the tokens being transferred
     * @param values Transfer amounts per token type
     */
    depositBatchERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
