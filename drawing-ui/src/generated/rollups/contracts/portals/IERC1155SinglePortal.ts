/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IERC1155SinglePortalInterface extends utils.Interface {
  functions: {
    "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": FunctionFragment;
    "getInputBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "depositSingleERC1155Token" | "getInputBox"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositSingleERC1155Token",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputBox",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositSingleERC1155Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputBox",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1155SinglePortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1155SinglePortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Transfer ERC-1155 tokens of a single type to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenId The identifier of the token being transferred
     * @param value Transfer amount
     */
    depositSingleERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Transfer ERC-1155 tokens of a single type to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
   * @param appContract The application contract address
   * @param baseLayerData Additional data to be interpreted by the base layer
   * @param execLayerData Additional data to be interpreted by the execution layer
   * @param token The ERC-1155 token contract
   * @param tokenId The identifier of the token being transferred
   * @param value Transfer amount
   */
  depositSingleERC1155Token(
    token: PromiseOrValue<string>,
    appContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    baseLayerData: PromiseOrValue<BytesLike>,
    execLayerData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the input box used by this portal.
   */
  getInputBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Transfer ERC-1155 tokens of a single type to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenId The identifier of the token being transferred
     * @param value Transfer amount
     */
    depositSingleERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Transfer ERC-1155 tokens of a single type to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenId The identifier of the token being transferred
     * @param value Transfer amount
     */
    depositSingleERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Transfer ERC-1155 tokens of a single type to an application contract and add an input to the application's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.
     * @param appContract The application contract address
     * @param baseLayerData Additional data to be interpreted by the base layer
     * @param execLayerData Additional data to be interpreted by the execution layer
     * @param token The ERC-1155 token contract
     * @param tokenId The identifier of the token being transferred
     * @param value Transfer amount
     */
    depositSingleERC1155Token(
      token: PromiseOrValue<string>,
      appContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      baseLayerData: PromiseOrValue<BytesLike>,
      execLayerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the input box used by this portal.
     */
    getInputBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
