/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace CartesiDAppFactory {
  export type FactoryConfigStruct = {
    diamondCutFacet: PromiseOrValue<string>;
    diamondInit: PromiseOrValue<string>;
    feeManagerBank: PromiseOrValue<string>;
    diamondCut: IDiamondCut.FacetCutStruct[];
  };

  export type FactoryConfigStructOutput = [
    string,
    string,
    string,
    IDiamondCut.FacetCutStructOutput[]
  ] & {
    diamondCutFacet: string;
    diamondInit: string;
    feeManagerBank: string;
    diamondCut: IDiamondCut.FacetCutStructOutput[];
  };
}

export declare namespace ICartesiDAppFactory {
  export type AppConfigStruct = {
    diamondOwner: PromiseOrValue<string>;
    templateHash: PromiseOrValue<BytesLike>;
    inputDuration: PromiseOrValue<BigNumberish>;
    challengePeriod: PromiseOrValue<BigNumberish>;
    inputLog2Size: PromiseOrValue<BigNumberish>;
    feePerClaim: PromiseOrValue<BigNumberish>;
    feeManagerOwner: PromiseOrValue<string>;
    validators: PromiseOrValue<string>[];
  };

  export type AppConfigStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[]
  ] & {
    diamondOwner: string;
    templateHash: string;
    inputDuration: BigNumber;
    challengePeriod: BigNumber;
    inputLog2Size: BigNumber;
    feePerClaim: BigNumber;
    feeManagerOwner: string;
    validators: string[];
  };
}

export interface CartesiDAppFactoryInterface extends utils.Interface {
  functions: {
    "diamondCut(uint256)": FunctionFragment;
    "diamondCutFacet()": FunctionFragment;
    "diamondInit()": FunctionFragment;
    "feeManagerBank()": FunctionFragment;
    "newApplication((address,bytes32,uint256,uint256,uint256,uint256,address,address[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "diamondCut"
      | "diamondCutFacet"
      | "diamondInit"
      | "feeManagerBank"
      | "newApplication"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCutFacet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManagerBank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication",
    values: [ICartesiDAppFactory.AppConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondCutFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeManagerBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication",
    data: BytesLike
  ): Result;

  events: {
    "ApplicationCreated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationCreated"): EventFragment;
}

export interface ApplicationCreatedEventObject {
  application: string;
  config: ICartesiDAppFactory.AppConfigStructOutput;
}
export type ApplicationCreatedEvent = TypedEvent<
  [string, ICartesiDAppFactory.AppConfigStructOutput],
  ApplicationCreatedEventObject
>;

export type ApplicationCreatedEventFilter =
  TypedEventFilter<ApplicationCreatedEvent>;

export interface CartesiDAppFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CartesiDAppFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    diamondCutFacet(overrides?: CallOverrides): Promise<[string]>;

    diamondInit(overrides?: CallOverrides): Promise<[string]>;

    feeManagerBank(overrides?: CallOverrides): Promise<[string]>;

    newApplication(
      _appConfig: ICartesiDAppFactory.AppConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  diamondCut(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { facetAddress: string; action: number }>;

  diamondCutFacet(overrides?: CallOverrides): Promise<string>;

  diamondInit(overrides?: CallOverrides): Promise<string>;

  feeManagerBank(overrides?: CallOverrides): Promise<string>;

  newApplication(
    _appConfig: ICartesiDAppFactory.AppConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    diamondCut(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { facetAddress: string; action: number }>;

    diamondCutFacet(overrides?: CallOverrides): Promise<string>;

    diamondInit(overrides?: CallOverrides): Promise<string>;

    feeManagerBank(overrides?: CallOverrides): Promise<string>;

    newApplication(
      _appConfig: ICartesiDAppFactory.AppConfigStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApplicationCreated(address,tuple)"(
      application?: PromiseOrValue<string> | null,
      config?: null
    ): ApplicationCreatedEventFilter;
    ApplicationCreated(
      application?: PromiseOrValue<string> | null,
      config?: null
    ): ApplicationCreatedEventFilter;
  };

  estimateGas: {
    diamondCut(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diamondCutFacet(overrides?: CallOverrides): Promise<BigNumber>;

    diamondInit(overrides?: CallOverrides): Promise<BigNumber>;

    feeManagerBank(overrides?: CallOverrides): Promise<BigNumber>;

    newApplication(
      _appConfig: ICartesiDAppFactory.AppConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diamondCutFacet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    diamondInit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManagerBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newApplication(
      _appConfig: ICartesiDAppFactory.AppConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
