/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DebugFacetInterface extends utils.Interface {
  functions: {
    "_erc721Withdrawal(bytes)": FunctionFragment;
    "_etherWithdrawal(bytes)": FunctionFragment;
    "_getFeePerClaim()": FunctionFragment;
    "_getInputDriveSize()": FunctionFragment;
    "_getNumRedeems(uint256)": FunctionFragment;
    "_getValidators()": FunctionFragment;
    "_onClaim(address,bytes32)": FunctionFragment;
    "_onDisputeEnd(address,address,bytes32)": FunctionFragment;
    "_onNewEpochOutput(bytes32)": FunctionFragment;
    "_onNewEpochVM()": FunctionFragment;
    "_setCurrentPhase(uint8)": FunctionFragment;
    "_setNumClaims(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_erc721Withdrawal"
      | "_etherWithdrawal"
      | "_getFeePerClaim"
      | "_getInputDriveSize"
      | "_getNumRedeems"
      | "_getValidators"
      | "_onClaim"
      | "_onDisputeEnd"
      | "_onNewEpochOutput"
      | "_onNewEpochVM"
      | "_setCurrentPhase"
      | "_setNumClaims"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_erc721Withdrawal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_etherWithdrawal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getFeePerClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getInputDriveSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getNumRedeems",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_onClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_onDisputeEnd",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_onNewEpochOutput",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_onNewEpochVM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setCurrentPhase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNumClaims",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_erc721Withdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_etherWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getFeePerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getInputDriveSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getNumRedeems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_onClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_onDisputeEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_onNewEpochOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_onNewEpochVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNumClaims",
    data: BytesLike
  ): Result;

  events: {
    "ClaimReceived(uint8,bytes32[2],address[2])": EventFragment;
    "DisputeEnded(uint8,bytes32[2],address[2])": EventFragment;
    "NewEpoch(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
}

export interface ClaimReceivedEventObject {
  result: number;
  claims: [string, string];
  validators: [string, string];
}
export type ClaimReceivedEvent = TypedEvent<
  [number, [string, string], [string, string]],
  ClaimReceivedEventObject
>;

export type ClaimReceivedEventFilter = TypedEventFilter<ClaimReceivedEvent>;

export interface DisputeEndedEventObject {
  result: number;
  claims: [string, string];
  validators: [string, string];
}
export type DisputeEndedEvent = TypedEvent<
  [number, [string, string], [string, string]],
  DisputeEndedEventObject
>;

export type DisputeEndedEventFilter = TypedEventFilter<DisputeEndedEvent>;

export interface NewEpochEventObject {
  claim: string;
}
export type NewEpochEvent = TypedEvent<[string], NewEpochEventObject>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface DebugFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DebugFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _erc721Withdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _etherWithdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _getFeePerClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getInputDriveSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getNumRedeems(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getValidators(overrides?: CallOverrides): Promise<[string[]]>;

    _onClaim(
      _sender: PromiseOrValue<string>,
      _claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * called when a dispute ends in rollups
     * @param _loser address of dispute loser
     * @param _winner address of dispute winner
     * @param _winningClaim the winning claim
     */
    _onDisputeEnd(
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winningClaim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _onNewEpochOutput(
      epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * called when a new epoch starts
     */
    _onNewEpochVM(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setCurrentPhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNumClaims(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _erc721Withdrawal(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _etherWithdrawal(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _getFeePerClaim(overrides?: CallOverrides): Promise<BigNumber>;

  _getInputDriveSize(overrides?: CallOverrides): Promise<BigNumber>;

  _getNumRedeems(
    _validatorIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getValidators(overrides?: CallOverrides): Promise<string[]>;

  _onClaim(
    _sender: PromiseOrValue<string>,
    _claim: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * called when a dispute ends in rollups
   * @param _loser address of dispute loser
   * @param _winner address of dispute winner
   * @param _winningClaim the winning claim
   */
  _onDisputeEnd(
    _winner: PromiseOrValue<string>,
    _loser: PromiseOrValue<string>,
    _winningClaim: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _onNewEpochOutput(
    epochHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * called when a new epoch starts
   */
  _onNewEpochVM(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setCurrentPhase(
    _phase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNumClaims(
    _validatorIndex: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _erc721Withdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _etherWithdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _getFeePerClaim(overrides?: CallOverrides): Promise<BigNumber>;

    _getInputDriveSize(overrides?: CallOverrides): Promise<BigNumber>;

    _getNumRedeems(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getValidators(overrides?: CallOverrides): Promise<string[]>;

    _onClaim(
      _sender: PromiseOrValue<string>,
      _claim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, [string, string], [string, string]]>;

    /**
     * called when a dispute ends in rollups
     * @param _loser address of dispute loser
     * @param _winner address of dispute winner
     * @param _winningClaim the winning claim
     */
    _onDisputeEnd(
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winningClaim: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, [string, string], [string, string]]>;

    _onNewEpochOutput(
      epochHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * called when a new epoch starts
     */
    _onNewEpochVM(overrides?: CallOverrides): Promise<string>;

    _setCurrentPhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setNumClaims(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimReceived(uint8,bytes32[2],address[2])"(
      result?: null,
      claims?: null,
      validators?: null
    ): ClaimReceivedEventFilter;
    ClaimReceived(
      result?: null,
      claims?: null,
      validators?: null
    ): ClaimReceivedEventFilter;

    "DisputeEnded(uint8,bytes32[2],address[2])"(
      result?: null,
      claims?: null,
      validators?: null
    ): DisputeEndedEventFilter;
    DisputeEnded(
      result?: null,
      claims?: null,
      validators?: null
    ): DisputeEndedEventFilter;

    "NewEpoch(bytes32)"(claim?: null): NewEpochEventFilter;
    NewEpoch(claim?: null): NewEpochEventFilter;
  };

  estimateGas: {
    _erc721Withdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _etherWithdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _getFeePerClaim(overrides?: CallOverrides): Promise<BigNumber>;

    _getInputDriveSize(overrides?: CallOverrides): Promise<BigNumber>;

    _getNumRedeems(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    _onClaim(
      _sender: PromiseOrValue<string>,
      _claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * called when a dispute ends in rollups
     * @param _loser address of dispute loser
     * @param _winner address of dispute winner
     * @param _winningClaim the winning claim
     */
    _onDisputeEnd(
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winningClaim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _onNewEpochOutput(
      epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * called when a new epoch starts
     */
    _onNewEpochVM(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setCurrentPhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNumClaims(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _erc721Withdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _etherWithdrawal(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _getFeePerClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getInputDriveSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNumRedeems(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _onClaim(
      _sender: PromiseOrValue<string>,
      _claim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * called when a dispute ends in rollups
     * @param _loser address of dispute loser
     * @param _winner address of dispute winner
     * @param _winningClaim the winning claim
     */
    _onDisputeEnd(
      _winner: PromiseOrValue<string>,
      _loser: PromiseOrValue<string>,
      _winningClaim: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _onNewEpochOutput(
      epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * called when a new epoch starts
     */
    _onNewEpochVM(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setCurrentPhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNumClaims(
      _validatorIndex: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
