/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ValidatorManagerFacetInterface extends utils.Interface {
  functions: {
    "getAgreementMask()": FunctionFragment;
    "getConsensusGoalMask()": FunctionFragment;
    "getCurrentClaim()": FunctionFragment;
    "getMaxNumValidators()": FunctionFragment;
    "getNumberOfClaimsByAddress(address)": FunctionFragment;
    "getNumberOfClaimsByIndex(uint256)": FunctionFragment;
    "getValidatorIndex(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAgreementMask"
      | "getConsensusGoalMask"
      | "getCurrentClaim"
      | "getMaxNumValidators"
      | "getNumberOfClaimsByAddress"
      | "getNumberOfClaimsByIndex"
      | "getValidatorIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAgreementMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusGoalMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxNumValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfClaimsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfClaimsByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorIndex",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAgreementMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusGoalMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxNumValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfClaimsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfClaimsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorIndex",
    data: BytesLike
  ): Result;

  events: {
    "ClaimReceived(uint8,bytes32[2],address[2])": EventFragment;
    "DisputeEnded(uint8,bytes32[2],address[2])": EventFragment;
    "NewEpoch(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
}

export interface ClaimReceivedEventObject {
  result: number;
  claims: [string, string];
  validators: [string, string];
}
export type ClaimReceivedEvent = TypedEvent<
  [number, [string, string], [string, string]],
  ClaimReceivedEventObject
>;

export type ClaimReceivedEventFilter = TypedEventFilter<ClaimReceivedEvent>;

export interface DisputeEndedEventObject {
  result: number;
  claims: [string, string];
  validators: [string, string];
}
export type DisputeEndedEvent = TypedEvent<
  [number, [string, string], [string, string]],
  DisputeEndedEventObject
>;

export type DisputeEndedEventFilter = TypedEventFilter<DisputeEndedEvent>;

export interface NewEpochEventObject {
  claim: string;
}
export type NewEpochEvent = TypedEvent<[string], NewEpochEventObject>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface ValidatorManagerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorManagerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * get agreement mask
     */
    getAgreementMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * get consensus goal mask
     */
    getConsensusGoalMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * get current claim
     */
    getCurrentClaim(overrides?: CallOverrides): Promise<[string]>;

    /**
     * get the maximum number of validators defined in validator manager
     */
    getMaxNumValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * get number of claims the sender has made
     * @param _sender validator address
     */
    getNumberOfClaimsByAddress(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * get number of claims by the index in the validator set
     * @param _index the index in validator set
     */
    getNumberOfClaimsByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * find the validator and return the index or revert
     * @param _sender validator address
     */
    getValidatorIndex(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  /**
   * get agreement mask
   */
  getAgreementMask(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * get consensus goal mask
   */
  getConsensusGoalMask(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * get current claim
   */
  getCurrentClaim(overrides?: CallOverrides): Promise<string>;

  /**
   * get the maximum number of validators defined in validator manager
   */
  getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * get number of claims the sender has made
   * @param _sender validator address
   */
  getNumberOfClaimsByAddress(
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * get number of claims by the index in the validator set
   * @param _index the index in validator set
   */
  getNumberOfClaimsByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * find the validator and return the index or revert
   * @param _sender validator address
   */
  getValidatorIndex(
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    /**
     * get agreement mask
     */
    getAgreementMask(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get consensus goal mask
     */
    getConsensusGoalMask(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get current claim
     */
    getCurrentClaim(overrides?: CallOverrides): Promise<string>;

    /**
     * get the maximum number of validators defined in validator manager
     */
    getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get number of claims the sender has made
     * @param _sender validator address
     */
    getNumberOfClaimsByAddress(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * get number of claims by the index in the validator set
     * @param _index the index in validator set
     */
    getNumberOfClaimsByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * find the validator and return the index or revert
     * @param _sender validator address
     */
    getValidatorIndex(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClaimReceived(uint8,bytes32[2],address[2])"(
      result?: null,
      claims?: null,
      validators?: null
    ): ClaimReceivedEventFilter;
    ClaimReceived(
      result?: null,
      claims?: null,
      validators?: null
    ): ClaimReceivedEventFilter;

    "DisputeEnded(uint8,bytes32[2],address[2])"(
      result?: null,
      claims?: null,
      validators?: null
    ): DisputeEndedEventFilter;
    DisputeEnded(
      result?: null,
      claims?: null,
      validators?: null
    ): DisputeEndedEventFilter;

    "NewEpoch(bytes32)"(claim?: null): NewEpochEventFilter;
    NewEpoch(claim?: null): NewEpochEventFilter;
  };

  estimateGas: {
    /**
     * get agreement mask
     */
    getAgreementMask(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get consensus goal mask
     */
    getConsensusGoalMask(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get current claim
     */
    getCurrentClaim(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get the maximum number of validators defined in validator manager
     */
    getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * get number of claims the sender has made
     * @param _sender validator address
     */
    getNumberOfClaimsByAddress(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * get number of claims by the index in the validator set
     * @param _index the index in validator set
     */
    getNumberOfClaimsByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * find the validator and return the index or revert
     * @param _sender validator address
     */
    getValidatorIndex(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * get agreement mask
     */
    getAgreementMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * get consensus goal mask
     */
    getConsensusGoalMask(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * get current claim
     */
    getCurrentClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * get the maximum number of validators defined in validator manager
     */
    getMaxNumValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * get number of claims the sender has made
     * @param _sender validator address
     */
    getNumberOfClaimsByAddress(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * get number of claims by the index in the validator set
     * @param _index the index in validator set
     */
    getNumberOfClaimsByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * find the validator and return the index or revert
     * @param _sender validator address
     */
    getValidatorIndex(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
