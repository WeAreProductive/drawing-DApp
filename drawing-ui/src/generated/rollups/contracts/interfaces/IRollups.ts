/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IRollupsInterface extends utils.Interface {
  functions: {
    "claim(bytes32)": FunctionFragment;
    "finalizeEpoch()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "claim" | "finalizeEpoch" | "getCurrentEpoch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,bytes32)": EventFragment;
    "FinalizeEpoch(uint256,bytes32)": EventFragment;
    "PhaseChange(uint8)": EventFragment;
    "ResolveDispute(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolveDispute"): EventFragment;
}

export interface ClaimEventObject {
  epochNumber: BigNumber;
  claimer: string;
  epochHash: string;
}
export type ClaimEvent = TypedEvent<
  [BigNumber, string, string],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface FinalizeEpochEventObject {
  epochNumber: BigNumber;
  epochHash: string;
}
export type FinalizeEpochEvent = TypedEvent<
  [BigNumber, string],
  FinalizeEpochEventObject
>;

export type FinalizeEpochEventFilter = TypedEventFilter<FinalizeEpochEvent>;

export interface PhaseChangeEventObject {
  newPhase: number;
}
export type PhaseChangeEvent = TypedEvent<[number], PhaseChangeEventObject>;

export type PhaseChangeEventFilter = TypedEventFilter<PhaseChangeEvent>;

export interface ResolveDisputeEventObject {
  winner: string;
  loser: string;
  winningClaim: string;
}
export type ResolveDisputeEvent = TypedEvent<
  [string, string, string],
  ResolveDisputeEventObject
>;

export type ResolveDisputeEventFilter = TypedEventFilter<ResolveDisputeEvent>;

export interface IRollups extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRollupsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims
     * claim the result of current epoch
     * @param _epochHash hash of epoch
     */
    claim(
      _epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * can only be called if challenge period is over
     * finalize epoch after timeout
     */
    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two epochs two non      finalized epochs, one awaiting consensus/dispute and another      accumulating input
     * returns index of current (accumulating) epoch
     */
    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  /**
   * ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims
   * claim the result of current epoch
   * @param _epochHash hash of epoch
   */
  claim(
    _epochHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * can only be called if challenge period is over
   * finalize epoch after timeout
   */
  finalizeEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two epochs two non      finalized epochs, one awaiting consensus/dispute and another      accumulating input
   * returns index of current (accumulating) epoch
   */
  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims
     * claim the result of current epoch
     * @param _epochHash hash of epoch
     */
    claim(
      _epochHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * can only be called if challenge period is over
     * finalize epoch after timeout
     */
    finalizeEpoch(overrides?: CallOverrides): Promise<void>;

    /**
     * if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two epochs two non      finalized epochs, one awaiting consensus/dispute and another      accumulating input
     * returns index of current (accumulating) epoch
     */
    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Claim(uint256,address,bytes32)"(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      claimer?: null,
      epochHash?: null
    ): ClaimEventFilter;
    Claim(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      claimer?: null,
      epochHash?: null
    ): ClaimEventFilter;

    "FinalizeEpoch(uint256,bytes32)"(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      epochHash?: null
    ): FinalizeEpochEventFilter;
    FinalizeEpoch(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      epochHash?: null
    ): FinalizeEpochEventFilter;

    "PhaseChange(uint8)"(newPhase?: null): PhaseChangeEventFilter;
    PhaseChange(newPhase?: null): PhaseChangeEventFilter;

    "ResolveDispute(address,address,bytes32)"(
      winner?: null,
      loser?: null,
      winningClaim?: null
    ): ResolveDisputeEventFilter;
    ResolveDispute(
      winner?: null,
      loser?: null,
      winningClaim?: null
    ): ResolveDisputeEventFilter;
  };

  estimateGas: {
    /**
     * ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims
     * claim the result of current epoch
     * @param _epochHash hash of epoch
     */
    claim(
      _epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * can only be called if challenge period is over
     * finalize epoch after timeout
     */
    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two epochs two non      finalized epochs, one awaiting consensus/dispute and another      accumulating input
     * returns index of current (accumulating) epoch
     */
    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims
     * claim the result of current epoch
     * @param _epochHash hash of epoch
     */
    claim(
      _epochHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * can only be called if challenge period is over
     * finalize epoch after timeout
     */
    finalizeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two epochs two non      finalized epochs, one awaiting consensus/dispute and another      accumulating input
     * returns index of current (accumulating) epoch
     */
    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
