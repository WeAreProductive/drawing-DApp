/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFeeManagerInterface extends utils.Interface {
  functions: {
    "getFeeManagerBank()": FunctionFragment;
    "getNumClaimsRedeemed(address)": FunctionFragment;
    "numClaimsRedeemable(address)": FunctionFragment;
    "redeemFee(address)": FunctionFragment;
    "resetFeePerClaim(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFeeManagerBank"
      | "getNumClaimsRedeemed"
      | "numClaimsRedeemable"
      | "redeemFee"
      | "resetFeePerClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeeManagerBank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumClaimsRedeemed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numClaimsRedeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetFeePerClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeManagerBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumClaimsRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numClaimsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetFeePerClaim",
    data: BytesLike
  ): Result;

  events: {
    "FeePerClaimReset(uint256)": EventFragment;
    "FeeRedeemed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeePerClaimReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRedeemed"): EventFragment;
}

export interface FeePerClaimResetEventObject {
  value: BigNumber;
}
export type FeePerClaimResetEvent = TypedEvent<
  [BigNumber],
  FeePerClaimResetEventObject
>;

export type FeePerClaimResetEventFilter =
  TypedEventFilter<FeePerClaimResetEvent>;

export interface FeeRedeemedEventObject {
  validator: string;
  claims: BigNumber;
}
export type FeeRedeemedEvent = TypedEvent<
  [string, BigNumber],
  FeeRedeemedEventObject
>;

export type FeeRedeemedEventFilter = TypedEventFilter<FeeRedeemedEvent>;

export interface IFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * returns the bank used to manage fees
     */
    getFeeManagerBank(overrides?: CallOverrides): Promise<[string]>;

    /**
     * this function can be called to check the number of claims that has been redeemed for the validator
     * @param _validator address of the validator
     */
    getNumClaimsRedeemed(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * this function can be called to check the number of claims that's redeemable for the validator
     * @param _validator address of the validator
     */
    numClaimsRedeemable(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * this function can be called to redeem fees for validators
     * @param _validator address of the validator that is redeeming
     */
    redeemFee(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * contract owner can set/reset the value of fee per claim
     * @param _value the new value of fee per claim
     */
    resetFeePerClaim(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * returns the bank used to manage fees
   */
  getFeeManagerBank(overrides?: CallOverrides): Promise<string>;

  /**
   * this function can be called to check the number of claims that has been redeemed for the validator
   * @param _validator address of the validator
   */
  getNumClaimsRedeemed(
    _validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function can be called to check the number of claims that's redeemable for the validator
   * @param _validator address of the validator
   */
  numClaimsRedeemable(
    _validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function can be called to redeem fees for validators
   * @param _validator address of the validator that is redeeming
   */
  redeemFee(
    _validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * contract owner can set/reset the value of fee per claim
   * @param _value the new value of fee per claim
   */
  resetFeePerClaim(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * returns the bank used to manage fees
     */
    getFeeManagerBank(overrides?: CallOverrides): Promise<string>;

    /**
     * this function can be called to check the number of claims that has been redeemed for the validator
     * @param _validator address of the validator
     */
    getNumClaimsRedeemed(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function can be called to check the number of claims that's redeemable for the validator
     * @param _validator address of the validator
     */
    numClaimsRedeemable(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function can be called to redeem fees for validators
     * @param _validator address of the validator that is redeeming
     */
    redeemFee(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * contract owner can set/reset the value of fee per claim
     * @param _value the new value of fee per claim
     */
    resetFeePerClaim(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeePerClaimReset(uint256)"(value?: null): FeePerClaimResetEventFilter;
    FeePerClaimReset(value?: null): FeePerClaimResetEventFilter;

    "FeeRedeemed(address,uint256)"(
      validator?: null,
      claims?: null
    ): FeeRedeemedEventFilter;
    FeeRedeemed(validator?: null, claims?: null): FeeRedeemedEventFilter;
  };

  estimateGas: {
    /**
     * returns the bank used to manage fees
     */
    getFeeManagerBank(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function can be called to check the number of claims that has been redeemed for the validator
     * @param _validator address of the validator
     */
    getNumClaimsRedeemed(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function can be called to check the number of claims that's redeemable for the validator
     * @param _validator address of the validator
     */
    numClaimsRedeemable(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function can be called to redeem fees for validators
     * @param _validator address of the validator that is redeeming
     */
    redeemFee(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * contract owner can set/reset the value of fee per claim
     * @param _value the new value of fee per claim
     */
    resetFeePerClaim(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * returns the bank used to manage fees
     */
    getFeeManagerBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function can be called to check the number of claims that has been redeemed for the validator
     * @param _validator address of the validator
     */
    getNumClaimsRedeemed(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function can be called to check the number of claims that's redeemable for the validator
     * @param _validator address of the validator
     */
    numClaimsRedeemable(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function can be called to redeem fees for validators
     * @param _validator address of the validator that is redeeming
     */
    redeemFee(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * contract owner can set/reset the value of fee per claim
     * @param _value the new value of fee per claim
     */
    resetFeePerClaim(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
