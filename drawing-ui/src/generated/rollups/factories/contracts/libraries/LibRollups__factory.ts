/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LibRollups,
  LibRollupsInterface,
} from "../../../contracts/libraries/LibRollups";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "epochNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "epochHash",
        type: "bytes32",
      },
    ],
    name: "FinalizeEpoch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Phase",
        name: "newPhase",
        type: "uint8",
      },
    ],
    name: "PhaseChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "loser",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "winningClaim",
        type: "bytes32",
      },
    ],
    name: "ResolveDispute",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037931b7a7a765b62a3eda86e3ed16ca1dff5949bf3344ac25376cd1ebf6a7c3264736f6c634300080d0033";

type LibRollupsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibRollupsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibRollups__factory extends ContractFactory {
  constructor(...args: LibRollupsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibRollups> {
    return super.deploy(overrides || {}) as Promise<LibRollups>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibRollups {
    return super.attach(address) as LibRollups;
  }
  override connect(signer: Signer): LibRollups__factory {
    return super.connect(signer) as LibRollups__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibRollupsInterface {
    return new utils.Interface(_abi) as LibRollupsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibRollups {
    return new Contract(address, _abi, signerOrProvider) as LibRollups;
  }
}
