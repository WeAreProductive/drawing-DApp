/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ValidatorManagerFacet1,
  ValidatorManagerFacet1Interface,
} from "../../../../contracts/facets/alternatives/ValidatorManagerFacet1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Result",
        name: "result",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32[2]",
        name: "claims",
        type: "bytes32[2]",
      },
      {
        indexed: false,
        internalType: "address payable[2]",
        name: "validators",
        type: "address[2]",
      },
    ],
    name: "ClaimReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Result",
        name: "result",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32[2]",
        name: "claims",
        type: "bytes32[2]",
      },
      {
        indexed: false,
        internalType: "address payable[2]",
        name: "validators",
        type: "address[2]",
      },
    ],
    name: "DisputeEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "claim",
        type: "bytes32",
      },
    ],
    name: "NewEpoch",
    type: "event",
  },
  {
    inputs: [],
    name: "getConsensusGoalMask",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentAgreementMask",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentClaim",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061011d806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063012ad61c1460415780638219fda4146084578063f60238151460b3575b600080fd5b7f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fe5463ffffffff165b60405163ffffffff90911681526020015b60405180910390f35b7f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fc54604051908152602001607b565b7f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fe54640100000000900463ffffffff16606a56fea2646970667358221220b582b0ba46aa1217a6ff137def183e38f303acb004e477640dfb0a57daac2be364736f6c634300080d0033";

type ValidatorManagerFacet1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorManagerFacet1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorManagerFacet1__factory extends ContractFactory {
  constructor(...args: ValidatorManagerFacet1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ValidatorManagerFacet1> {
    return super.deploy(overrides || {}) as Promise<ValidatorManagerFacet1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ValidatorManagerFacet1 {
    return super.attach(address) as ValidatorManagerFacet1;
  }
  override connect(signer: Signer): ValidatorManagerFacet1__factory {
    return super.connect(signer) as ValidatorManagerFacet1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorManagerFacet1Interface {
    return new utils.Interface(_abi) as ValidatorManagerFacet1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidatorManagerFacet1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ValidatorManagerFacet1;
  }
}
