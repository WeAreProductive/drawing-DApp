/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SafeERC20Transfer,
  SafeERC20TransferInterface,
} from "../../../contracts/delegatecall/SafeERC20Transfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "safeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610326806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d1660f9914610030575b600080fd5b61004361003e36600461025e565b610045565b005b6100596001600160a01b038416838361005e565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b179052610059918591906000906100bc9084168361010f565b905080516000141580156100e15750808060200190518101906100df919061029f565b155b1561005957604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b606061011d83836000610124565b9392505050565b6060814710156101495760405163cd78605960e01b8152306004820152602401610106565b600080856001600160a01b0316848660405161016591906102c1565b60006040518083038185875af1925050503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b606091505b50915091506101b78683836101c1565b9695505050505050565b6060826101d6576101d18261021d565b61011d565b81511580156101ed57506001600160a01b0384163b155b1561021657604051639996b31560e01b81526001600160a01b0385166004820152602401610106565b508061011d565b80511561022d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b038116811461024657600080fd5b60008060006060848603121561027357600080fd5b833561027e81610249565b9250602084013561028e81610249565b929592945050506040919091013590565b6000602082840312156102b157600080fd5b8151801515811461011d57600080fd5b6000825160005b818110156102e257602081860181015185830152016102c8565b50600092019182525091905056fea2646970667358221220770726e7ad5dd1738ebf2b83baa38187dd37ed24d03d1b61c4ef95f8cde1b84c64736f6c63430008170033";

type SafeERC20TransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeERC20TransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeERC20Transfer__factory extends ContractFactory {
  constructor(...args: SafeERC20TransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafeERC20Transfer> {
    return super.deploy(overrides || {}) as Promise<SafeERC20Transfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeERC20Transfer {
    return super.attach(address) as SafeERC20Transfer;
  }
  override connect(signer: Signer): SafeERC20Transfer__factory {
    return super.connect(signer) as SafeERC20Transfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeERC20TransferInterface {
    return new utils.Interface(_abi) as SafeERC20TransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeERC20Transfer {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20Transfer;
  }
}
