/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DS3Facet,
  DS3FacetInterface,
} from "../../../../contracts/test_helper/facets/DS3Facet";

const _abi = [
  {
    inputs: [],
    name: "getX",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getY",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getZ",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "x",
        type: "uint32",
      },
    ],
    name: "setX",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "y",
        type: "uint32",
      },
    ],
    name: "setY",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "z",
        type: "uint32",
      },
    ],
    name: "setZ",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610223806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630b7f1665146100675780631468db5e1461009f5780632f135d0c146100e55780635197c7aa1461010757806389dc616014610122578063eb421e2f14610169575b600080fd5b6000805160206101ce83398151915254640100000000900463ffffffff165b60405163ffffffff909116815260200160405180910390f35b6100e36100ad3660046101a0565b6000805160206101ce833981519152805467ffffffff00000000191664010000000063ffffffff90931692909202919091179055565b005b6000805160206101ce83398151915254600160401b900463ffffffff16610086565b6000805160206101ce8339815191525463ffffffff16610086565b6100e36101303660046101a0565b6000805160206101ce83398151915280546bffffffff00000000000000001916600160401b63ffffffff90931692909202919091179055565b6100e36101773660046101a0565b6000805160206101ce833981519152805463ffffffff191663ffffffff92909216919091179055565b6000602082840312156101b257600080fd5b813563ffffffff811681146101c657600080fd5b939250505056fec47562ccbe325ce9e309f81a37bccc9baa9b4a3de9b8d88bd7e4f2b6e504ca95a264697066735822122072e89e1228a9d36c13be4962b5fa42978c78c1f561e0f74ad4a54404cee36bc264736f6c634300080d0033";

type DS3FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DS3FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DS3Facet__factory extends ContractFactory {
  constructor(...args: DS3FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DS3Facet> {
    return super.deploy(overrides || {}) as Promise<DS3Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DS3Facet {
    return super.attach(address) as DS3Facet;
  }
  override connect(signer: Signer): DS3Facet__factory {
    return super.connect(signer) as DS3Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DS3FacetInterface {
    return new utils.Interface(_abi) as DS3FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DS3Facet {
    return new Contract(address, _abi, signerOrProvider) as DS3Facet;
  }
}
