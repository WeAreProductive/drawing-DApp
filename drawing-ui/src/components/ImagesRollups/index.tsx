import { ethers } from "ethers";
import { useGetNoticesQuery } from "../../generated/graphql";
import { useWallets } from "@web3-onboard/react";
import { useEffect, useState } from "react";
import { DrawingInputExtended, DataNoticeEdge } from "../../shared/types";
import DrawingsList from "./DrawingsList";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { ScrollArea } from "../ui/scroll-area";
import pako from "pako";

const ImagesListRollups = () => {
  const [connectedWallet] = useWallets();
  const account = connectedWallet.accounts[0].address;
  const [myDrawings, setMyDrawings] = useState<DrawingInputExtended[] | null>(
    null,
  );
  const [noticeDrawings, setNoticeDrawings] = useState<
    DrawingInputExtended[] | null
  >(null);
  const [cursor, setCursor] = useState<string | null | undefined | null>(null);
  const [result, reexecuteQuery] = useGetNoticesQuery({
    variables: { cursor },
    pause: true,
  });
  const { data, error } = result;

  useEffect(() => {
    if (result.fetching) return;
    // Set up to refetch in one second, if the query is idle
    //Retrieve notices every 1000 ms
    const timerId = setTimeout(() => {
      reexecuteQuery({ requestPolicy: "network-only" });
    }, 1000);
    const length = data?.notices?.edges?.length;
    if (length) {
      // Update cursor so that next GraphQL poll retrieves only newer data
      setCursor(data.notices.pageInfo.endCursor);
    }
    return () => clearTimeout(timerId);
  }, [result.fetching, reexecuteQuery]);
  console.log(data);
  // const payload =
  //   "0x654a79646c3174503544595578372b4b6c5434326a487a4a7a664e57556657685972586153745575416f51795351625344636b306b316d3652587a336e6d4d37457a50486a4c524641754c6a2f4732666978332f58714a364c4a2f622f694661732b6a6c4e717147666d723636545a61333042722b723572345045323270585434323055333062666d6e48664472307870697531347359366a4f3144323338783171375a547037783268696e59576473746e4d742b556f6e73544f76307851656e39736170316a6e2b59704c6144383237634d6a766c7467373762744f6e6a754431304872663030446c2f74776e37693573634d62733266335543434830322f6c767648583861782f483436784658624e35666c7a6f7730446f652b39735a423063667464742f67497667627965394432776331662f6274646869666f4739626476766d61502f5154733134315436313033466856646b31474441784e3635646f2b776675735a4e75653361335264764e477866652b3168563162743948306535724773682b664678322f747674325973616278674b39767975727267316e7a3564414e6f334842724237442b38656873794874682f37665a68784d783635732b2b6d33647478507073756d41657750336241707538766861546673776265507532597370376b7539734e68724a714c4157724678755a72382f786c446949385837746e573154726d35766236414f384b464d6f437336466c447a6e537367307a76534b693773592b6a2b352f76536b503562354b6a6b78466f756949496f385670775973364e4353644b5a78696f6863795372644e485164535778796f68524c597163644d705961544b4c38475a4a364c4a466e416871584254554631416f5975542b4c416e746a6850714946385531464651554163394263304b4b50515a5255703935334571616277574258565478696e4e592b37356e684c6663785851354e6d5a57584b4e367a6f7846737166686153734b4e44376b316d30723645783168717a6371495266436b786d6d664238304339434f47564a636d42454470574a463377654b61553856655258536c6b766d69494f304a71744a35716c4469377a59524b30457055336e596d4b5257714346713150785074543054514b733971564e43616e4e576b49592b5373314649677648324e5453446f4946614f4b4d4a3141397161493438662b6a4778686a517a6576486a6534576a485561794b71666f5a525748655156546a4a61433534716f334d70504f43707974393857574175695a386d596c324f6e357a754d38586a6e4a776c5550666554486c77582b51465652572b69713545466e46427379755844324e424934476177506f3844613038314152327571634a6e42314672476d655049326d73554f4e4f7175684f776b316752587252554f6a44546e5367577a374830684e505649436a6d4e615130754e363043744b44695061597263305855464973456852356e586e5a6b3941506568753965373179686d5564302b4e5431657876647764332b7846326834456c6b476e666236624a757630443463326871762b4c7143735869754c7a6235566c776b7064786562485264583469556c374b576161703467594d507a33307a6f6f442f6f366f6b71657136336d536c356e7862796b31617048557474573634716f58636c6f6e55616c4f5a4e5a565463312b4e4466777a30306b756b7775754c34526b496c6e7a644a3057717a784e744d682b356e7a4e4f577136636a2f64483362316a326a73362f6664674e787938324c6e2f6345787a4e33322f7a685a566e6a565256335647366374516430506d372b6161747262465345363453743479635758484469687958435443624c464a7251684743326d617a5142484a6e77594d2b6157575379316a55445a474c486a46746b386e4a6559432f653165485a7341427a48494c444f6d4b4b6a736250632b48776f2b6b49544b63444f474443635178485247386b467065676b37385249433446464136576f4d666944434f7764467955675356737a593172317a437735435930734f534e5a6d444a617a74596d6f6378734c54343532414a4441615732436b736f514f5243797569457259644b52324c7959415364706a59672f5539544d4a3350456f794d5546496d6b4f486b4f53655466314152643145482b4131796b6a4d51524b376954363546394c544638424d6a6d6d476e44534c794b4847414a51594a535747714f5245464a555973424b6a734d51734c63327977414b6872756d646b4345777a534a794b6a4f347a7a4f4b544d77796b354e525a6f4a2b4d4a4d76444d755743464a7373694a7949574b576e47595a2b5152425035674437764a464650416152514633505645675779676958786c6652473968526b51687967384635527354647370457a494c554c4b4f68414a494b79664c733346774155347a6544356e4671566c4763776b38785368514d65334c416f454870474b55715a6942716c6c463134685546536f6f7731567a39644c4d494667786569396e427133654c33727a683137326d61477257555a647732736b6f337a4648474339767a4f5273426746456d59754b724f4d5a687376343247373975634c764142332f3742646e706570642b7a4a65566b61396934354835546b6e535434736b42715555616836343073564742474673696435317667524441684357783650354b4276575553514f6e724a484d5576327a4b4b5941785232424f53416d4d49594978796d444d51646773444d306f7a636550327063446a4849597730732b6f7954474849724e776e633245595578356d68734667595742436a434b493878417a424f526f484d7955494c39575342366a537930424868795549484438676f6d4c325255544a7a4d734a6d623257426e57646b6f63587252525a494165614f4568707a6944594c413934426f7a454b616378513269774c6c5a4c43457a36514f6e662b585558595430434e656152326833664c345641394e7550393250783961505957556379743950552f65316e5763773d3d";
  // console.log(ethers.utils.arrayify(payload)); // converts to Uint8array
  // let compressedData = ethers.utils.arrayify(payload);
  // console.log(compressedData);
  // let decompressedData = pako.inflate(compressedData, { to: "string" });
  // let jsonObject = JSON.parse(decompressedData);
  // console.log(jsonObject);
  useEffect(() => {
    const newDrawings = data?.notices.edges.map(({ node }: DataNoticeEdge) => {
      let payload = node?.payload;
      let drawingData;
      if (payload) {
        try {
          payload = ethers.utils.toUtf8String(payload);
          console.log(payload);
        } catch (e) {
          payload = payload;
        }
      } else {
        payload = "(empty)";
      }
      const payload1 =
        "0x654a79646c3174503544595578372b4b6c5434326a487a4a7a664e57556657685972586153745575416f51795351625344636b306b316d3652587a336e6d4d37457a50486a4c524641754c6a2f4732666978332f58714a364c4a2f622f694661732b6a6c4e717147666d723636545a61333042722b723572345045323270585434323055333062666d6e48664472307870697531347359366a4f3144323338783171375a547037783268696e59576473746e4d742b556f6e73544f76307851656e39736170316a6e2b59704c6144383237634d6a766c7467373762744f6e6a754431304872663030446c2f74776e37693573634d62733266335543434830322f6c767648583861782f483436784658624e35666c7a6f7730446f652b39735a423063667464742f67497667627965394432776331662f6274646869666f4739626476766d61502f5154733134315436313033466856646b31474441784e3635646f2b776675735a4e75653361335264764e477866652b3168563162743948306535724773682b664678322f747674325973616278674b39767975727267316e7a3564414e6f334842724237442b38656873794874682f37665a68784d783635732b2b6d33647478507073756d41657750336241707538766861546673776265507532597370376b7539734e68724a714c4157724678755a72382f786c446949385837746e573154726d35766236414f384b464d6f437336466c447a6e537367307a76534b693773592b6a2b352f76536b503562354b6a6b78466f756949496f385670775973364e4353644b5a78696f6863795372644e485164535778796f68524c597163644d705961544b4c38475a4a364c4a466e416871584254554631416f5975542b4c416e746a6850714946385531464651554163394263304b4b50515a5255703935334571616277574258565478696e4e592b37356e684c6663785851354e6d5a57584b4e367a6f7846737166686153734b4e44376b316d30723645783168717a6371495266436b786d6d664238304339434f47564a636d42454470574a463377654b61553856655258536c6b766d69494f304a71744a35716c4469377a59524b30457055336e596d4b5257714346713150785074543054514b733971564e43616e4e576b49592b5373314649677648324e5453446f4946614f4b4d4a3141397161493438662b6a4778686a517a6576486a6534576a485561794b71666f5a525748655156546a4a61433534716f334d70504f43707974393857574175695a386d596c324f6e357a754d38586a6e4a776c5550666554486c77582b51465652572b69713545466e46427379755844324e424934476177506f3844613038314152327571634a6e42314672476d655049326d73554f4e4f7175684f776b316752587252554f6a44546e5367577a374830684e505649436a6d4e615130754e363043744b44695061597263305855464973456852356e586e5a6b3941506568753965373179686d5564302b4e5431657876647764332b7846326834456c6b476e666236624a757630443463326871762b4c7143735869754c7a6235566c776b7064786562485264583469556c374b576161703467594d507a33307a6f6f442f6f366f6b71657136336d536c356e7862796b31617048557474573634716f58636c6f6e55616c4f5a4e5a565463312b4e4466777a30306b756b7775754c34526b496c6e7a644a3057717a784e744d682b356e7a4e4f577136636a2f64483362316a326a73362f6664674e787938324c6e2f6345787a4e33322f7a685a566e6a565256335647366374516430506d372b6161747262465345363453743479635758484469687958435443624c464a7251684743326d617a5142484a6e77594d2b6157575379316a55445a474c486a46746b386e4a6559432f653165485a7341427a48494c444f6d4b4b6a736250632b48776f2b6b49544b63444f474443635178485247386b467065676b37385249433446464136576f4d666944434f7764467955675356737a593172317a437735435930734f534e5a6d444a617a74596d6f6378734c54343532414a4441615732436b736f514f5243797569457259644b52324c7959415364706a59672f5539544d4a3350456f794d5546496d6b4f486b4f53655466314152643145482b4131796b6a4d51524b376954363546394c544638424d6a6d6d476e44534c794b4847414a51594a535747714f5245464a555973424b6a734d51734c63327977414b6872756d646b4345777a534a794b6a4f347a7a4f4b544d77796b354e525a6f4a2b4d4a4d76444d755743464a7373694a7949574b576e47595a2b5152425035674437764a464650416152514633505645675779676958786c6652473968526b51687967384635527354647370457a494c554c4b4f68414a494b79664c733346774155347a6544356e4671566c4763776b38785368514d65334c416f454870474b55715a6942716c6c463134685546536f6f7731567a39644c4d494667786569396e427133654c33727a683137326d61477257555a647732736b6f337a4648474339767a4f5273426746456d59754b724f4d5a687376343247373975634c764142332f3742646e706570642b7a4a65566b61396934354835546b6e535434736b42715555616836343073564742474673696435317667524441684357783650354b4276575553514f6e724a484d5576327a4b4b5941785232424f53416d4d49594978796d444d51646773444d306f7a636550327063446a4849597730732b6f7954474849724e776e633245595578356d68734667595742436a434b493878417a424f526f484d7955494c39575342366a537930424868795549484438676f6d4c325255544a7a4d734a6d623257426e57646b6f63587252525a494165614f4568707a6944594c413934426f7a454b616378513269774c6c5a4c43457a36514f6e662b585558595430434e656152326833664c345641394e7550393250783961505957556379743950552f65316e5763773d3d";
      console.log(ethers.utils.arrayify(payload1)); // converts to Uint8array
      let compressedData = ethers.utils.arrayify(payload);
      console.log(compressedData);
      let decompressedData = pako.inflate(compressedData, { to: "string" });
      console.log(decompressedData);
      // try {
      //   const parsedPayload = JSON.parse(payload);
      //   console.log(parsedPayload);
      //   const drawingData = pako.inflate(parsedPayload, {
      //     to: "string",
      //   });
      //   return JSON.parse(drawingData);
      // } catch (e) {
      //   console.log(e);
      // }
    });

    // // Concat new drawings with previous ones
    // if (newDrawings && newDrawings.length) {
    //   // Add new rendered drawings to stored data
    //   const ret = noticeDrawings
    //     ? noticeDrawings.concat(newDrawings)
    //     : newDrawings;
    //   if (!ret) return;
    //   setNoticeDrawings(ret);
    // }

    // if (!newDrawings) return;

    // const newMyDrawings = newDrawings.filter(
    //   (drawing) => drawing.owner.toLowerCase() == account.toLowerCase(),
    // );

    // if (newMyDrawings && newMyDrawings.length) {
    //   // Add new rendered drawings to stored data
    //   const retMine = myDrawings
    //     ? myDrawings.concat(newMyDrawings)
    //     : newMyDrawings;
    //   if (!retMine) return;
    //   setMyDrawings(retMine);
    // }
  }, [data]);

  // reset my drawings on account change
  useEffect(() => {
    if (!noticeDrawings) return;
    const newMyDrawings = noticeDrawings.filter(
      (drawing) => drawing?.owner?.toLowerCase() == account.toLowerCase(),
    );
    setMyDrawings(newMyDrawings);
  }, [account]);

  if (error) return <p className="error">Oh no... {error.message}</p>;

  return (
    <div className="flex">
      <Tabs defaultValue="account">
        <TabsList>
          <TabsTrigger value="account">My Drawings</TabsTrigger>
          <TabsTrigger value="password">All Drawings</TabsTrigger>
        </TabsList>
        <TabsContent value="account" className="flex">
          <ScrollArea className="max-h-[calc(100svh-var(--header-height)-120px)]">
            <DrawingsList drawings={myDrawings} />
          </ScrollArea>
        </TabsContent>
        <TabsContent value="password" className="flex">
          <ScrollArea className="max-h-[calc(100svh-var(--header-height)-120px)]">
            <DrawingsList drawings={noticeDrawings} />
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ImagesListRollups;
